[{"path":[]},{"path":[]},{"path":"/articles/01_resvidex_vignette.html","id":"but-what-do-this-options-mean","dir":"Articles","previous_headings":"","what":"But what do this options mean?:","title":"How to use the ReSVidex app","text":"probability threshold can choose minimum chance likelihood one lineages classification model. recommended 0.2. can set percentage bases sequence allowed left ambiguous. recommended 10%. can also change much difference proportion probable sequence model. recommended 10% Finally, option classify even sequence low quality, tick “classify even…” option, parameters explained .","code":""},{"path":[]},{"path":[]},{"path":"/articles/02_resvidex_vignette_R.html","id":"copy-the-following-script-and-run-all-the-lines","dir":"Articles","previous_headings":"Step by step on how to use ReSVidex with R","what":"2. Copy the following script and run all the lines","title":"How to use ReSVidex with R","text":"see results can open .cvs file saved working directory excel type program. result:","code":"#First you have to download the ReSVidex package if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")  #load the library library(resvidex)  # Indicate the file path to the fasta file to use. If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":"/articles/04_an_example.html","id":"lets-see-how-resvidex-runs-this-dataset","dir":"Articles","previous_headings":"","what":"Let’s see how ReSVidex runs this dataset:","title":"Let's get real: a full example with a real dataset","text":"First created new R script set folder fasta saved, working directory  Loaded ReSVidex library Loaded name fasta file, case “data_set.fasta” Used classification function ReSVidex package saved Visualized console dataframe created function writing “Classification_1” script running line (instead write line console )  Saved results cvs file open excel type program. file always saved folder set working directory  can see, long list hard read, … make GRAPHICS!! First let’s install load ggplot2 package, useful package made making type graphics make bar graphic shows us many sequences passed probability check look like  see many sequences per clade  want give colors graphs rewrite plot like look like  ’s … change parameters… function classify predetermined parameters values can change example ’ll use dataset, lower probability QC_value. line look like put lower value length, like Let’s make comparison using graphs original example… number sequences passed quality test  classification","code":"library(resvidex) file<-\"RSV_900_sequences.fasta\" Classification_Print<-classify(inputFile=file, model=FULL_GENOME) utils::write.csv2(Classification_1,\"Classification_1.csv\") install.package(\"ggplot2\")  library (ggplot2) plot1<-ggplot(data = Classification_1,              aes(x=Probability_QC))+              labs(x=\"Passed probability check\",                     y=\"Sequences\")+   geom_bar() plot1 plot2<-ggplot(data = Classification_1,               aes(x=Clade))+   theme(axis.text.x = element_text(angle = 45, hjust = 1))+   geom_bar() col<-\"#7AC5CD\" col2<-\"#FF8C00\"  plot1<-ggplot(data = Classification_1,              aes(x=Probability_QC, group=Probability_QC))+              labs(x=\"Passed probability check\",                   y=\"Sequences\")+              theme(legend.position=\"none\")+   scale_fill_manual(values = c(col2, col))+   geom_bar(aes(fill=Probability_QC))  plot2<-ggplot(data = Classification_1,               aes(x=Clade))+   theme(axis.text.x = element_text(angle = 45, hjust = 1))+    scale_colour_gradientn(colours = c(col,col2))+   theme(legend.position=\"none\")+   geom_bar(aes(fill=Clade)) classify(inputFile=file,         model=FULL_GENOME,         QC_value=0.4,         Length_value=0.5,         N_value=2) Classification_2<-resvidex::classify(inputFile=file,                    model=FULL_GENOME,                    QC_value=0.2) Classification_3<-resvidex::classify(inputFile=file,                                      model=FULL_GENOME,                                      Length_value = 0.1)"},{"path":"/articles/an_example.html","id":"lets-see-how-resvidex-runs-this-dataset","dir":"Articles","previous_headings":"","what":"Let’s see how ReSVidex runs this dataset:","title":"An example...","text":"First created new R script set folder fasta saved, working directory.  Loaded ReSVidex library Loaded name fasta file, case “data_set.fasta” Used classification function ReSVidex package saved Visualized console dataframe created function writing “Classification_print” script running line (instead write line console ).  Saved results cvs file open excel type program. file always saved folder set working directory.  can see, sequences didn’t pass probability check, couldn’t classified model.","code":"library(resvidex) file<-\"data_set.fasta\" Classification_Print<-classify(inputFile=file, model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":[]},{"path":[]},{"path":"/articles/E1_resvidex_vignette.html","id":"but-what-do-this-options-mean","dir":"Articles","previous_headings":"","what":"But what do this options mean?:","title":"How to use the ReSVidex app","text":"probability threshold can choose minimum chance likelihood one lineages classification model. recommended 0.2. can set percentage bases sequence allowed left ambiguous. recommended 10%. can also change much difference proportion probable sequence model. recommended 10% Finally, option classify even sequence low quality, tick “classify even…” option, parameters explained .","code":""},{"path":[]},{"path":[]},{"path":"/articles/E2_resvidex_vignette_R.html","id":"copy-the-following-script-and-run-all-the-lines","dir":"Articles","previous_headings":"Step by step on how to use ReSVidex with R","what":"2. Copy the following script and run all the lines","title":"How to use ReSVidex with R","text":"see results can open .cvs file saved working directory excel type program. result:","code":"#First you have to download the ReSVidex package if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")  #load the library library(resvidex)  # Indicate the file path to the fasta file to use. If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":"/articles/E4_an_example.html","id":"lets-see-how-resvidex-runs-this-dataset","dir":"Articles","previous_headings":"","what":"Let’s see how ReSVidex runs this dataset:","title":"Let's get real: a full example with a real dataset","text":"First created new R script set folder fasta saved, working directory  Loaded ReSVidex library Loaded name fasta file, case “data_set.fasta” Used classification function ReSVidex package saved Visualized console dataframe created function writing “Classification_1” script running line (instead write line console )  Saved results cvs file open excel type program. file always saved folder set working directory  can see, long list hard read, … make GRAPHICS!! First let’s install load ggplot2 package, useful package made making type graphics make bar graphic shows us many sequences passed probability check look like  see many sequences per clade  want give colors graphs rewrite plot like look like  ’s … change parameters… function classify predetermined parameters values can change example ’ll use dataset, lower probability QC_value. line look like put lower value length, like Let’s make comparison using graphs original example… number sequences passed quality test  classification","code":"library(resvidex) file<-\"RSV_900_sequences.fasta\" Classification_Print<-classify(inputFile=file, model=FULL_GENOME) utils::write.csv2(Classification_1,\"Classification_1.csv\") install.package(\"ggplot2\")  library (ggplot2) plot1<-ggplot(data = Classification_1,              aes(x=Probability_QC))+              labs(x=\"Passed probability check\",                     y=\"Sequences\")+   geom_bar() plot1 plot2<-ggplot(data = Classification_1,               aes(x=Clade))+   theme(axis.text.x = element_text(angle = 45, hjust = 1))+   geom_bar() col<-\"#7AC5CD\" col2<-\"#FF8C00\"  plot1<-ggplot(data = Classification_1,              aes(x=Probability_QC, group=Probability_QC))+              labs(x=\"Passed probability check\",                   y=\"Sequences\")+              theme(legend.position=\"none\")+   scale_fill_manual(values = c(col2, col))+   geom_bar(aes(fill=Probability_QC))  plot2<-ggplot(data = Classification_1,               aes(x=Clade))+   theme(axis.text.x = element_text(angle = 45, hjust = 1))+    scale_colour_gradientn(colours = c(col,col2))+   theme(legend.position=\"none\")+   geom_bar(aes(fill=Clade)) classify(inputFile=file,         model=FULL_GENOME,         QC_value=0.4,         Length_value=0.5,         N_value=2) Classification_2<-resvidex::classify(inputFile=file,                    model=FULL_GENOME,                    QC_value=0.2) Classification_3<-resvidex::classify(inputFile=file,                                      model=FULL_GENOME,                                      Length_value = 0.1)"},{"path":[]},{"path":[]},{"path":"/articles/resvidex_vignette.html","id":"but-what-do-this-options-mean","dir":"Articles","previous_headings":"","what":"But what do this options mean?:","title":"How to use the ReSVidex app","text":"probability threshold can choose minimum chance likelihood one lineages classification model. recommended 0.2. can set percentage bases sequence allowed left ambiguous. recommended 10%. can also change much difference proportion probable sequence model. recommended 10% Finally, option classify even sequence low quality, tick “classify even…” option, parameters explained .","code":""},{"path":[]},{"path":[]},{"path":"/articles/resvidex_vignette_R.html","id":"copy-the-following-script-and-run-all-the-lines","dir":"Articles","previous_headings":"Step by step on how to use ReSVidex with R","what":"2. Copy the following script and run all the lines","title":"How to use ReSVidex with R","text":"see results can open .cvs file saved working directory excel type program. result:","code":"#First you have to download the ReSVidex package if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")  #load the library library(resvidex)  # Indicate the file path to the fasta file to use. If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marco Cacciabue. Author, maintainer. Melina Obregon. Author. Nahuel Fenoglio. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cacciabue M, Obregon M, Fenoglio N (2024). resvidex: Molecular Classification Respiratory Syncytial Virus Sequences. R package version 0.0.0.9012.","code":"@Manual{,   title = {resvidex: Molecular Classification of Respiratory Syncytial Virus Sequences},   author = {Marco Cacciabue and Melina Obregon and Nahuel Fenoglio},   year = {2024},   note = {R package version 0.0.0.9012}, }"},{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement . complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to ReSVidex","title":"Contributing to ReSVidex","text":"Thank much interest taking time contribute! types contributions encouraged valued. See Table contents different ways help details project handles . Please make sure read relevant section making contribution. make lot easier us maintainers smooth experience involved.","code":""},{"path":"/CONTRIBUTING.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of contents","title":"Contributing to ReSVidex","text":"Code conduct Style guide Commit messages Asking questions Reporting bugs Requesting features Contributing code","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to ReSVidex","text":"project released Contributor Code Conduct. participating, expected uphold code. Please report unacceptable behavior marcocacciabue@yahoo.com.","code":""},{"path":"/CONTRIBUTING.html","id":"style-guide","dir":"","previous_headings":"","what":"Style guide","title":"Contributing to ReSVidex","text":"use Tidyverse style guide writing R code. Functions documented roxygen2 syntax. ReSVidex uses lower_snake_case.","code":""},{"path":"/CONTRIBUTING.html","id":"commit-messages","dir":"","previous_headings":"","what":"Commit messages","title":"Contributing to ReSVidex","text":"want contribute commiting changes, please try use Conventional commits specification.","code":""},{"path":"/CONTRIBUTING.html","id":"asking-questions","dir":"","previous_headings":"","what":"Asking questions","title":"Contributing to ReSVidex","text":"ask question, best search existing Issues might help . case found suitable issue still need clarification, can write question issue. still feel need ask question need clarification, recommend following: Open new Issue. Provide much context can ’re running . Provide project platform versions (paste output sessionInfo()). take care issue soon possible.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"before-submitting-a-bug-report","dir":"","previous_headings":"Reporting bugs","what":"Before submitting a bug report","title":"Contributing to ReSVidex","text":"good bug report shouldn’t leave others needing chase information. Therefore, ask investigate carefully, collect information describe issue detail report. Please complete following steps advance help us fix potential bug fast possible. Make sure using latest version ReSVidex. Determine bug really bug error side. see users experienced (potentially already solved) issue , check already bug report existing bug error bug tracker.","code":""},{"path":"/CONTRIBUTING.html","id":"how-do-i-submit-a-bug-report","dir":"","previous_headings":"Reporting bugs","what":"How do I submit a bug report?","title":"Contributing to ReSVidex","text":"use GitHub Issues track bugs errors. run issue project: Open new Issue. Use template bug_report.md. Explain behavior expect actual behavior. Please provide much context possible describe reproduction steps someone else can follow recreate issue . usually includes code reproducible example. take care issue soon possible.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"before-requesting-a-feature","dir":"","previous_headings":"Requesting features","what":"Before requesting a feature","title":"Contributing to ReSVidex","text":"Make sure using latest version ReSVidex. Read documentation carefully find functionality already covered. Perform search see enhancement already suggested. , add comment existing issue instead opening new one.","code":""},{"path":"/CONTRIBUTING.html","id":"how-do-i-submit-a-feature-request","dir":"","previous_headings":"Requesting features","what":"How do I submit a feature request?","title":"Contributing to ReSVidex","text":"Feature requests tracked GitHub Issues. Open new Issue. Use template feature_request.md. Provide clear descriptive title issue identify suggestion. Provide step--step description suggested enhancement many details possible. Explain enhancement useful ReSVidex users. take care issue soon possible.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"general-workflow","dir":"","previous_headings":"Contributing code","what":"General workflow","title":"Contributing to ReSVidex","text":"use GitHub flow collaborate project: Fork repository using GitHub interface. Clone fork using git clone fork-url (replace fork-url URL fork). Alternatively, open RStudio IDE create New Project Version Control. Create new branch w/ git checkout -b branch-name (replace branch-name name new branch). Make contribution (see examples). Stage (git add) commit (git commit) changes often necessary Push changes GitHub w/ git push origin branch-name. Submit Pull Request original repo. review PR soon possible.","code":""},{"path":[]},{"path":"/CONTRIBUTING.html","id":"editing-the-readme","dir":"","previous_headings":"Contributing code > Improve documentation","what":"Editing the README","title":"Contributing to ReSVidex","text":"want contribute improving README, please edit README.Rmd (README.md). forget update README.md running:","code":"rmarkdown::render(\"README.Rmd\")"},{"path":"/CONTRIBUTING.html","id":"editing-vignettes","dir":"","previous_headings":"Contributing code > Improve documentation","what":"Editing vignettes","title":"Contributing to ReSVidex","text":"want contribute editing existing vignette, just edit corresponding Rmd file stored vignettes/ folder. want contribute adding new vignette, create new Rmd vignettes/ folder add following header: use new external dependency, forget add DESCRIPTION file section Suggests (package already listed tag Imports). Check integrity package :","code":"--- title: \"Vignette Title\" output: rmarkdown::html_vignette vignette: >   %\\VignetteIndexEntry{Vignette Title}   %\\VignetteEngine{knitr::rmarkdown}   %\\VignetteEncoding{UTF-8} --- devtools::check()"},{"path":"/CONTRIBUTING.html","id":"editing-function-documentation","dir":"","previous_headings":"Contributing code > Improve documentation","what":"Editing function documentation","title":"Contributing to ReSVidex","text":"want contribute improving documentation function, open corresponding file R/ folder edit lines starting #' (roxygen2 syntax). Update documentation (Rd files man/ folder) running: use new external dependency example section, forget add DESCRIPTION file section Imports (package already listed). Check integrity package :","code":"devtools::document() devtools::check()"},{"path":"/CONTRIBUTING.html","id":"fix-bug","dir":"","previous_headings":"Contributing code","what":"Fix bug","title":"Contributing to ReSVidex","text":"want contribute improving code function, open edit corresponding file R/ folder. Check integrity package : forget adapt unit tests function editing corresponding file stored tests/testthat/ folder. use package testthat implement unit tests. Check tests running:","code":"devtools::check() devtools::test()"},{"path":"/CONTRIBUTING.html","id":"new-feature","dir":"","previous_headings":"Contributing code","what":"New feature","title":"Contributing to ReSVidex","text":"want contribute submitting new feature, please follow workflow: Create new R file folder R/. Implement code function. Document function w/ roxygen2 syntax. necessary, add additional dependencies DESCRIPTION file. Update package documentation w/ devtools::document(). Create new R file folder tests/testthat/. Implement unit tests new function. Check integrity package w/ devtools::check().","code":""},{"path":"/index.html","id":"resvidex--molecular-classification-of-respiratory-syncytial-virus-sequences","dir":"","previous_headings":"","what":"Molecular Classification of Respiratory Syncytial Virus Sequences","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"working R Rstudio setup can install released version ReSVidex GitHub : take several minutes depending system installation. first time runs. Alternatively, can download repository .zip file install manually Rstudio.","code":"if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")"},{"path":"/index.html","id":"resvidex-is-an-r-package","dir":"","previous_headings":"","what":"ReSVidex is an R package","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"means users prefer working directly R console can use exported functions. easiest way use wrapper function “classify()” detailed workflow user can use exported functions package.","code":"#load the library library(resvidex)  # Indicate the file path to the fasta file to use.If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\") # First we indicate the location of the fasta file. In this case, we use a test file provided with the package itself. file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # We load the sequences sequence<-ape::read.FASTA(file_path,type = \"DNA\")  # We the count and normalize the k-mers NormalizedData <- kcounter(SequenceData=sequence,model=FULL_GENOME)  # We perform the classification PredictedData <- prediction_caller(NormalizedData=NormalizedData,model=FULL_GENOME)  # We add the quality FLAGs PredictedData <- quality_control(PredictedData,model=FULL_GENOME)  # We adjust the classification according to the FLAGs present for each sample: PredictedData <- quality_filter(PredictedData)  # The PredictedData dataframe contains the classifications  PredictedData"},{"path":[]},{"path":"/index.html","id":"resvidex-as-a-shiny-app-in-docker","dir":"","previous_headings":"🐳 Docker images available","what":"ReSVidex as a shiny app in docker","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"Another way run ReSVidex shiny app use docker image. Follow steps: don´t already , install docker: https://www.docker.com/get-started. Open terminal run following: wait image download. run command first time, whenever want check updates. downloading complete run following: Finally, open favorite browser go http://localhost:3838/ app running browser. Load fasta file press RUN. can save report using corresponding button.","code":"docker pull cacciabue/resvidex:shiny docker run -d --rm -p 3838:3838 cacciabue/resvidex:shiny"},{"path":"/index.html","id":"resvidex-in-a-docker-image-with-all-dependencies-already-installed","dir":"","previous_headings":"🐳 Docker images available","what":"ReSVidex in a docker image with all dependencies already installed","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"reproducibility fully operational environment available work directly docker: don´t already , install docker: https://www.docker.com/get-started. Open terminal, go directory fasta files stored run following: downloading complete run following: Now can run Alternatively can perform step 3 4 one command like :","code":"docker pull cacciabue/resvidex:cli #for WINDOWS  docker run -it --rm --volume %cd%:/nexus cacciabue/resvidex:cli  #for unix/MAC docker run -it --rm --volume $(pwd):/nexus cacciabue/resvidex:cli setwd('nexus')  #Call the 'resvidex' library library(resvidex)  # Indicate the file path to the fasta file to use.If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can pass other arguments Classification<-classify(inputFile=file_path,model=FULL_GENOME) Classification  #if you want to export the prediction utils::write.csv2(Classification,'Classification_file.csv')  # This command saves a file in the working directory as \"Results.csv\" by default. You can change the name file setting the \"outputFile\" parameter.  # To exit the container just run  q() #for WINDOWS   docker run --rm --volume %cd%:/nexus cacciabue/resvidex:cli R -e \"setwd('nexus');library('resvidex');Classification<-classify(inputFile='test_dataset.fasta',model=FULL_GENOME);utils::write.csv2(Classification,'Classification_file.csv')\"  #for unix/MAC  docker run --rm --volume $(pwd):/nexus cacciabue/resvidex:cli R -e \"setwd('nexus');library('resvidex');Classification<-classify(inputFile='test_dataset.fasta',model=FULL_GENOME);utils::write.csv2(Classification,'Classification_file.csv')\"   # USER SHOULD CHANGE test_dataset.fasta for the correct file name"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 resvidex authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/Classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Resvidex pipeline — classify","title":"Resvidex pipeline — classify","text":"Wrapper function performs recommended step. includes kcounter # Count Kmers normalize data prediction_caller Run prediction pipeline quality_control Check Quality input data classification results quality_filter sequences FLAG present set result Clade LowQuality","code":""},{"path":"/reference/Classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resvidex pipeline — classify","text":"","code":"classify(inputFile, model, QC_value = 0.4, Length_value = 0.5, N_value = 2)"},{"path":"/reference/Classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resvidex pipeline — classify","text":"inputFile string path relative working directory input file. Must fasta format. model random forest classification model. Must FULL_GENOME. See FULL_GENOME. QC_value numeric value 0.3 1. (default = 0.4) Length_value numeric value 0 1. Proportion difference expected sequence length. (default = 0.5) N_value numeric value 0 100. Percentage acceptable ambiguous bases. (default = 2)","code":""},{"path":"/reference/Classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resvidex pipeline — classify","text":"dataframe","code":""},{"path":"/reference/Classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resvidex pipeline — classify","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")   Classification<-classify(inputFile=file_path,model=FULL_GENOME) #> Error in classify(inputFile = file_path, model = FULL_GENOME): could not find function \"classify\"  #the variable Classification has now all the sequences classified Classification #> Error in eval(expr, envir, enclos): object 'Classification' not found  if (FALSE) { #if you want to export the prediction utils::write.csv2(Classification,\"Classification_file.csv\") }"},{"path":"/reference/FULL_GENOME.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","title":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","text":"classification model (created ranger package) use ReSVidex package","code":""},{"path":"/reference/FULL_GENOME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","text":"","code":"FULL_GENOME"},{"path":"/reference/FULL_GENOME.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","text":"model includes list 18 elements (modified Object class ranger): predictions training dataset predictions num.trees Number decision trees (usually 1000) num.independent.variables Number independent variables mtry Value mtry used min.node.size Value minimal node size used. prediction.error Overall bag prediction error. forest Saved forest confusion.matrix Contingency table classes predictions based bag samples splitrule tSplit rule used training num.random.splits Number random splits treetype Type forest/tree call Function call importance.mode Importance mode used num.samples Number samples kmer k-mer size used preprocessing info extra information classification model (optional) date date model creation genome_size sequence length","code":""},{"path":"/reference/G.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forest classification model based on full length RSV genome sequences — G","title":"Random forest classification model based on full length RSV genome sequences — G","text":"classification model (created ranger package) use ReSVidex package","code":""},{"path":"/reference/G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random forest classification model based on full length RSV genome sequences — G","text":"","code":"G"},{"path":"/reference/G.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random forest classification model based on full length RSV genome sequences — G","text":"model includes list 18 elements (modified Object class ranger): predictions training dataset predictions num.trees Number decision trees (usually 1000) num.independent.variables Number independent variables mtry Value mtry used min.node.size Value minimal node size used. prediction.error Overall bag prediction error. forest Saved forest confusion.matrix Contingency table classes predictions based bag samples splitrule tSplit rule used training num.random.splits Number random splits treetype Type forest/tree call Function call importance.mode Importance mode used num.samples Number samples kmer k-mer size used preprocessing info extra information classification model (optional) date date model creation genome_size sequence length","code":""},{"path":"/reference/ignore_unused_imports.html","id":null,"dir":"Reference","previous_headings":"","what":"Ignore unused imports — ignore_unused_imports","title":"Ignore unused imports — ignore_unused_imports","text":"Ignore unused imports","code":""},{"path":"/reference/ignore_unused_imports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ignore unused imports — ignore_unused_imports","text":"","code":"ignore_unused_imports()"},{"path":"/reference/ignore_unused_imports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ignore unused imports — ignore_unused_imports","text":"nothing","code":""},{"path":"/reference/Kcounter.html","id":null,"dir":"Reference","previous_headings":"","what":"kcounter — kcounter","title":"kcounter — kcounter","text":"Counts k-mers size required input model normalize data regarding genome size.","code":""},{"path":"/reference/Kcounter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"kcounter — kcounter","text":"","code":"kcounter(SequenceData, model)"},{"path":"/reference/Kcounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"kcounter — kcounter","text":"SequenceData list DNA sequences. Object must created ape package. See example. model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/Kcounter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"kcounter — kcounter","text":"list 3 vectors: normalized k-mer counts, genome length contents undefined bases.","code":""},{"path":"/reference/Kcounter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"kcounter — kcounter","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData<-kcounter(SequenceData=sequence,model=FULL_GENOME) #> Error in kcounter(SequenceData = sequence, model = FULL_GENOME): could not find function \"kcounter\""},{"path":"/reference/ModelControl.html","id":null,"dir":"Reference","previous_headings":"","what":"model_control\r\nUtility function to check the classification model object — model_control","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"model_control Utility function check classification model object","code":""},{"path":"/reference/ModelControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"","code":"model_control(model)"},{"path":"/reference/ModelControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/ModelControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"warnings","code":""},{"path":"/reference/ModelControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"","code":"model_control(FULL_GENOME)"},{"path":"/reference/model_control.html","id":null,"dir":"Reference","previous_headings":"","what":"model_control\r\nUtility function to check the classification model object — model_control","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"model_control Utility function check classification model object","code":""},{"path":"/reference/model_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"","code":"model_control(model)"},{"path":"/reference/model_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/model_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"warnings","code":""},{"path":"/reference/model_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"model_control\r\nUtility function to check the classification model object — model_control","text":"","code":"model_control(FULL_GENOME) #> Error in model_control(FULL_GENOME): could not find function \"model_control\""},{"path":"/reference/PredictionCaller.html","id":null,"dir":"Reference","previous_headings":"","what":"PredictionCaller — PredictionCaller","title":"PredictionCaller — PredictionCaller","text":"Performs prediction computes probability values.","code":""},{"path":"/reference/PredictionCaller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PredictionCaller — PredictionCaller","text":"","code":"prediction_caller(NormalizedData, model, QC_unknown = 0.3)"},{"path":"/reference/PredictionCaller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PredictionCaller — PredictionCaller","text":"NormalizedData list 3 elements: normalized k-mer counts, genome length contents undefined bases.Produced kcounter() function model random forest classification model. Must FULL_GENOME. See FULL_GENOME. QC_unknown numeric value 0 1. Stringent filter, classify probability score (default = 0.2)","code":""},{"path":"/reference/PredictionCaller.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PredictionCaller — PredictionCaller","text":"Data.frame classification results quality checks. output following properties: row corresponds one sample sequence. Label name sequence. Clade corresponding prediction. Probability proportions trees agreed Clade result. Values 0 1. Probability_QC logical value. TRUE sequence passed quality filter probability. Run quality_control() fill column. Length Sequence length. Length_QC logical value. TRUE sequence passed quality filter length.Run quality_control() fill column N proportions undefined bases sequence. lower better. N_QC logical value. TRUE sequence passed quality filter undefined bases. Run quality_control() fill column","code":""},{"path":"/reference/PredictionCaller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PredictionCaller — PredictionCaller","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- kcounter(SequenceData=sequence,model=FULL_GENOME)  PredictedData <- prediction_caller(NormalizedData=NormalizedData,model=FULL_GENOME)"},{"path":"/reference/prediction_caller.html","id":null,"dir":"Reference","previous_headings":"","what":"prediction_caller — prediction_caller","title":"prediction_caller — prediction_caller","text":"Performs prediction computes probability values.","code":""},{"path":"/reference/prediction_caller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prediction_caller — prediction_caller","text":"","code":"prediction_caller(NormalizedData, model, QC_unknown = 0.3)"},{"path":"/reference/prediction_caller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prediction_caller — prediction_caller","text":"NormalizedData list 3 elements: normalized k-mer counts, genome length contents undefined bases.Produced kcounter() function model random forest classification model. Must FULL_GENOME. See FULL_GENOME. QC_unknown numeric value 0 1. Stringent filter, classify probability score (default = 0.2)","code":""},{"path":"/reference/prediction_caller.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prediction_caller — prediction_caller","text":"Data.frame classification results quality checks. output following properties: row corresponds one sample sequence. Label name sequence. Clade corresponding prediction. Probability proportions trees agreed Clade result. Values 0 1. Probability_QC logical value. TRUE sequence passed quality filter probability. Run quality_control() fill column. Length Sequence length. Length_QC logical value. TRUE sequence passed quality filter length.Run quality_control() fill column N proportions undefined bases sequence. lower better. N_QC logical value. TRUE sequence passed quality filter undefined bases. Run quality_control() fill column","code":""},{"path":"/reference/prediction_caller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prediction_caller — prediction_caller","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- kcounter(SequenceData=sequence,model=FULL_GENOME) #> Error in kcounter(SequenceData = sequence, model = FULL_GENOME): could not find function \"kcounter\"  PredictedData <- prediction_caller(NormalizedData=NormalizedData,model=FULL_GENOME) #> Error in prediction_caller(NormalizedData = NormalizedData, model = FULL_GENOME): could not find function \"prediction_caller\""},{"path":"/reference/QualityControl.html","id":null,"dir":"Reference","previous_headings":"","what":"QualityControl — QualityControl","title":"QualityControl — QualityControl","text":"quality_control","code":""},{"path":"/reference/QualityControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QualityControl — QualityControl","text":"","code":"quality_control(data, QC_value = 0.4, Length_value = 0.5, N_value = 2, model)"},{"path":"/reference/QualityControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QualityControl — QualityControl","text":"data data.frame obtained prediction_caller() QC_value numeric value 0.3 1. (default = 0.4) Length_value numeric value 0 1. Proportion difference expected sequence length. (default = 0.5) N_value numeric value 0 100. Percentage acceptable ambiguous bases. (default = 2) model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/QualityControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QualityControl — QualityControl","text":"list three logical vectors. case TRUE means pass.","code":""},{"path":"/reference/QualityControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QualityControl — QualityControl","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- kcounter(SequenceData=sequence,model=FULL_GENOME)  PredictedData <- prediction_caller(NormalizedData=NormalizedData,model=FULL_GENOME)  quality_control(PredictedData,model=FULL_GENOME) #>                                                                            Label #> 1 KM360090.1 Respiratory syncytial virus isolate RSV Memphis-37, complete genome #>   Clade Probability Length Length_QC N N_QC Probability_QC #> 1 A.2.1       0.785  15147      TRUE 0 TRUE           TRUE"},{"path":"/reference/quality_control.html","id":null,"dir":"Reference","previous_headings":"","what":"quality_control — quality_control","title":"quality_control — quality_control","text":"quality_control","code":""},{"path":"/reference/quality_control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quality_control — quality_control","text":"","code":"quality_control(data, QC_value = 0.4, Length_value = 0.5, N_value = 2, model)"},{"path":"/reference/quality_control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quality_control — quality_control","text":"data data.frame obtained prediction_caller() QC_value numeric value 0.3 1. (default = 0.4) Length_value numeric value 0 1. Proportion difference expected sequence length. (default = 0.5) N_value numeric value 0 100. Percentage acceptable ambiguous bases. (default = 2) model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/quality_control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quality_control — quality_control","text":"list three logical vectors. case TRUE means pass.","code":""},{"path":"/reference/quality_control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"quality_control — quality_control","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- kcounter(SequenceData=sequence,model=FULL_GENOME) #> Error in kcounter(SequenceData = sequence, model = FULL_GENOME): could not find function \"kcounter\"  PredictedData <- prediction_caller(NormalizedData=NormalizedData,model=FULL_GENOME) #> Error in prediction_caller(NormalizedData = NormalizedData, model = FULL_GENOME): could not find function \"prediction_caller\"  quality_control(PredictedData,model=FULL_GENOME) #> Error in quality_control(PredictedData, model = FULL_GENOME): could not find function \"quality_control\""},{"path":"/reference/Quality_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"quality_filter — quality_filter","title":"quality_filter — quality_filter","text":"Change Clade definition \"LowQuality\" samples least one FLAG quality_control().","code":""},{"path":"/reference/Quality_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"quality_filter — quality_filter","text":"","code":"quality_filter(data)"},{"path":"/reference/Quality_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"quality_filter — quality_filter","text":"data data.frame obtained quality_control()","code":""},{"path":"/reference/Quality_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"quality_filter — quality_filter","text":"data.frame","code":""},{"path":"/reference/Quality_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"quality_filter — quality_filter","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- kcounter(SequenceData=sequence,model=FULL_GENOME) #> Error in kcounter(SequenceData = sequence, model = FULL_GENOME): could not find function \"kcounter\"  PredictedData <- prediction_caller(NormalizedData=NormalizedData,model=FULL_GENOME) #> Error in prediction_caller(NormalizedData = NormalizedData, model = FULL_GENOME): could not find function \"prediction_caller\"  PredictedData <- quality_control(PredictedData,model=FULL_GENOME) #> Error in quality_control(PredictedData, model = FULL_GENOME): could not find function \"quality_control\"  PredictedData <- quality_filter(PredictedData) #> Error in quality_filter(PredictedData): could not find function \"quality_filter\""},{"path":"/reference/runShinyApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Resvidex shiny app — runShinyApp","title":"Run Resvidex shiny app — runShinyApp","text":"Deploys server runs Resvidex app locally","code":""},{"path":"/reference/runShinyApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Resvidex shiny app — runShinyApp","text":"","code":"run_shiny_app()"},{"path":"/reference/runShinyApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Resvidex shiny app — runShinyApp","text":"shiny app","code":""},{"path":"/reference/runShinyApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Resvidex shiny app — runShinyApp","text":"","code":"if (FALSE) { resvidex::run_shiny_app() }"},{"path":"/reference/run_shiny_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Resvidex shiny app — run_shiny_app","title":"Run Resvidex shiny app — run_shiny_app","text":"Deploys server runs Resvidex app locally","code":""},{"path":"/reference/run_shiny_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Resvidex shiny app — run_shiny_app","text":"","code":"run_shiny_app()"},{"path":"/reference/run_shiny_app.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Resvidex shiny app — run_shiny_app","text":"shiny app","code":""},{"path":"/reference/run_shiny_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Resvidex shiny app — run_shiny_app","text":"","code":"if (FALSE) { resvidex::run_shiny_app() }"},{"path":"/news/index.html","id":"resvidex-development-version","dir":"Changelog","previous_headings":"","what":"resvidex (development version)","title":"resvidex (development version)","text":"version 0.0.0.9011 changed QC_unknown filter 0.3","code":""}]
