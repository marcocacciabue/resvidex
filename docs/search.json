[{"path":[]},{"path":[]},{"path":"/articles/01_resvidex_vignette.html","id":"but-what-do-this-options-mean","dir":"Articles","previous_headings":"","what":"But what do this options mean?:","title":"How to use the ReSVidex app","text":"probability threshold can choose minimum chance likelihood one lineages classification model. recommended 0.2. can set percentage bases sequence allowed left ambiguous. recommended 10%. can also change much difference proportion probable sequence model. recommended 10% Finally, option classify even sequence low quality, tick “Classify even…” option, parameters explained .","code":""},{"path":[]},{"path":[]},{"path":"/articles/02_resvidex_vignette_R.html","id":"copy-the-following-script-and-run-all-the-lines","dir":"Articles","previous_headings":"Step by step on how to use ReSVidex with R","what":"2. Copy the following script and run all the lines","title":"How to use ReSVidex with R","text":"see results can open .cvs file saved working directory excel type program. result:","code":"#First you have to download the ReSVidex package if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")  #load the library library(resvidex)  # Indicate the file path to the fasta file to use. If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments Classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-Classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":"/articles/04_an_example.html","id":"lets-see-how-resvidex-runs-this-dataset","dir":"Articles","previous_headings":"","what":"Let’s see how ReSVidex runs this dataset:","title":"Let's get real: a full example with a real dataset","text":"First created new R script set folder fasta saved, working directory  Loaded ReSVidex library Loaded name fasta file, case “data_set.fasta” Used classification function ReSVidex package saved Visualized console dataframe created function writing “Classification_1” script running line (instead write line console )  Saved results cvs file open excel type program. file always saved folder set working directory  can see, long list hard read, … make GRAPHICS!! First let’s install load ggplot2 package, useful package made making type graphics make bar graphic shows us many sequences passed probability check look like  see many sequences per clade  want give colors graphs rewrite plot like look like  ’s … change parameters… function Classify predetermined parameters values can change example ’ll use dataset, lower probability QC_value. line look like put lower value length, like Let’s make comparison using graphs original example… number sequences passed quality test  classification","code":"library(resvidex) file<-\"RSV_900_sequences.fasta\" Classification_Print<-Classify(inputFile=file, model=FULL_GENOME) utils::write.csv2(Classification_1,\"Classification_1.csv\") install.package(\"ggplot2\")  library (ggplot2) plot1<-ggplot(data = Classification_1,              aes(x=Probability_QC))+              labs(x=\"Passed probability check\",                     y=\"Sequences\")+   geom_bar() plot1 plot2<-ggplot(data = Classification_1,               aes(x=Clade))+   theme(axis.text.x = element_text(angle = 45, hjust = 1))+   geom_bar() col<-\"#7AC5CD\" col2<-\"#FF8C00\"  plot1<-ggplot(data = Classification_1,              aes(x=Probability_QC, group=Probability_QC))+              labs(x=\"Passed probability check\",                   y=\"Sequences\")+              theme(legend.position=\"none\")+   scale_fill_manual(values = c(col2, col))+   geom_bar(aes(fill=Probability_QC))  plot2<-ggplot(data = Classification_1,               aes(x=Clade))+   theme(axis.text.x = element_text(angle = 45, hjust = 1))+    scale_colour_gradientn(colours = c(col,col2))+   theme(legend.position=\"none\")+   geom_bar(aes(fill=Clade)) Classify(inputFile=file,         model=FULL_GENOME,         QC_value=0.4,         Length_value=0.5,         N_value=2) Classification_2<-resvidex::Classify(inputFile=file,                    model=FULL_GENOME,                    QC_value=0.2) Classification_3<-resvidex::Classify(inputFile=file,                                      model=FULL_GENOME,                                      Length_value = 0.1)"},{"path":"/articles/an_example.html","id":"lets-see-how-resvidex-runs-this-dataset","dir":"Articles","previous_headings":"","what":"Let’s see how ReSVidex runs this dataset:","title":"An example...","text":"First created new R script set folder fasta saved, working directory.  Loaded ReSVidex library Loaded name fasta file, case “data_set.fasta” Used classification function ReSVidex package saved Visualized console dataframe created function writing “Classification_print” script running line (instead write line console ).  Saved results cvs file open excel type program. file always saved folder set working directory.  can see, sequences didn’t pass probability check, couldn’t classified model.","code":"library(resvidex) file<-\"data_set.fasta\" Classification_Print<-Classify(inputFile=file, model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":[]},{"path":[]},{"path":"/articles/resvidex_vignette.html","id":"but-what-do-this-options-mean","dir":"Articles","previous_headings":"","what":"But what do this options mean?:","title":"How to use the ReSVidex app","text":"probability threshold can choose minimum chance likelihood one lineages classification model. recommended 0.2. can set percentage bases sequence allowed left ambiguous. recommended 10%. can also change much difference proportion probable sequence model. recommended 10% Finally, option classify even sequence low quality, tick “Classify even…” option, parameters explained .","code":""},{"path":[]},{"path":[]},{"path":"/articles/resvidex_vignette_R.html","id":"copy-the-following-script-and-run-all-the-lines","dir":"Articles","previous_headings":"Step by step on how to use ReSVidex with R","what":"2. Copy the following script and run all the lines","title":"How to use ReSVidex with R","text":"see results can open .cvs file saved working directory excel type program. result:","code":"#First you have to download the ReSVidex package if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")  #load the library library(resvidex)  # Indicate the file path to the fasta file to use. If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments Classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-Classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\")"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marco Cacciabue. Author, maintainer. Melina Obregon. Author. Nahuel Fenoglio. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cacciabue M, Obregon M, Fenoglio N (2024). resvidex: Molecular Classification Respiratory Syncytial Virus Sequences. R package version 0.0.0.9011.","code":"@Manual{,   title = {resvidex: Molecular Classification of Respiratory Syncytial Virus Sequences},   author = {Marco Cacciabue and Melina Obregon and Nahuel Fenoglio},   year = {2024},   note = {R package version 0.0.0.9011}, }"},{"path":"/index.html","id":"resvidex--molecular-classification-of-respiratory-syncytial-virus-sequences","dir":"","previous_headings":"","what":"Molecular Classification of Respiratory Syncytial Virus Sequences","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"working R Rstudio setup can install released version ReSVidex GitHub : take several minutes depending system installation. first time runs. Alternatively, can download repository .zip file install manually Rstudio.","code":"if (!require(\"remotes\", quietly = TRUE))   install.packages(\"remotes\")    remotes::install_github(\"marcocacciabue/resvidex\")"},{"path":"/index.html","id":"resvidex-is-an-r-package","dir":"","previous_headings":"","what":"ReSVidex is an R package","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"means users prefer working directly R console can use exported functions. easiest way use wrapper function “Classify()” detailed workflow user can use exported functions package.","code":"#load the library library(resvidex)  # Indicate the file path to the fasta file to use.If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can change the classification model and pass other arguments Classify(inputFile=file_path,model=FULL_GENOME)  #If you want to save the results in a file in your working directory, you can run the pipeline and #save it as a variable to export Classification_Print<-Classify(inputFile=file_path,model=FULL_GENOME) utils::write.csv2(Classification_Print,\"Classification_file.csv\") # First we indicate the location of the fasta file. In this case, we use a test file provided with the package itself. file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # We load the sequences sequence<-ape::read.FASTA(file_path,type = \"DNA\")  # We the count and normalize the k-mers NormalizedData <- Kcounter(SequenceData=sequence,model=FULL_GENOME)  # We perform the classification PredictedData <- PredictionCaller(NormalizedData=NormalizedData,model=FULL_GENOME)  # We add the quality FLAGs PredictedData <- QualityControl(PredictedData,model=FULL_GENOME)  # We adjust the classification according to the FLAGs present for each sample: PredictedData <- Quality_filter(PredictedData)  # The PredictedData dataframe contains the classifications  PredictedData"},{"path":[]},{"path":"/index.html","id":"resvidex-as-a-shiny-app-in-docker","dir":"","previous_headings":"🐳 Docker images available","what":"ReSVidex as a shiny app in docker","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"Another way run ReSVidex shiny app use docker image. Follow steps: don´t already , install docker: https://www.docker.com/get-started. Open terminal run following: wait image download. run command first time, whenever want check updates. downloading complete run following: Finally, open favorite browser go http://localhost:3838/ app running browser. Load fasta file press RUN. can save report using corresponding button.","code":"docker pull cacciabue/resvidex:shiny docker run -d --rm -p 3838:3838 cacciabue/resvidex:shiny"},{"path":"/index.html","id":"resvidex-in-a-docker-image-with-all-dependencies-already-installed","dir":"","previous_headings":"🐳 Docker images available","what":"ReSVidex in a docker image with all dependencies already installed","title":"Molecular Classification of Respiratory Syncytial Virus Sequences","text":"reproducibility fully operational environment available work directly docker: don´t already , install docker: https://www.docker.com/get-started. Open terminal, go directory fasta files stored run following: downloading complete run following: Now can run Alternatively can perform step 3 4 one command like :","code":"docker pull cacciabue/resvidex:cli #for WINDOWS  docker run -it --rm --volume %cd%:/nexus cacciabue/resvidex:cli  #for unix/MAC docker run -it --rm --volume $(pwd):/nexus cacciabue/resvidex:cli setwd('nexus')  #Call the 'resvidex' library library(resvidex)  # Indicate the file path to the fasta file to use.If your file is in your working directory you need to simply indicate the file name. In this case, we use a test file provided with the package itself.   file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  # Use the wrapper function. You can pass other arguments Classification<-Classify(inputFile=file_path,model=FULL_GENOME) Classification  #if you want to export the prediction utils::write.csv2(Classification,'Classification_file.csv')  # This command saves a file in the working directory as \"Results.csv\" by default. You can change the name file setting the \"outputFile\" parameter.  # To exit the container just run  q() #for WINDOWS   docker run --rm --volume %cd%:/nexus cacciabue/resvidex:cli R -e \"setwd('nexus');library('resvidex');Classification<-Classify(inputFile='test_dataset.fasta',model=FULL_GENOME);utils::write.csv2(Classification,'Classification_file.csv')\"  #for unix/MAC  docker run --rm --volume $(pwd):/nexus cacciabue/resvidex:cli R -e \"setwd('nexus');library('resvidex');Classification<-Classify(inputFile='test_dataset.fasta',model=FULL_GENOME);utils::write.csv2(Classification,'Classification_file.csv')\"   # USER SHOULD CHANGE test_dataset.fasta for the correct file name"},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 resvidex authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/reference/Classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Resvidex pipeline — Classify","title":"Resvidex pipeline — Classify","text":"Wrapper function performs recommended step. includes Kcounter # Count Kmers normalize data PredictionCaller Run prediction pipeline QualityControl Check Quality input data classification results Quality_filter sequences FLAG present set result Clade LowQuality","code":""},{"path":"/reference/Classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resvidex pipeline — Classify","text":"","code":"Classify(inputFile, model, QC_value = 0.4, Length_value = 0.5, N_value = 2)"},{"path":"/reference/Classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resvidex pipeline — Classify","text":"inputFile string path relative working directory input file. Must fasta format. model random forest classification model. Must FULL_GENOME. See FULL_GENOME. QC_value numeric value 0.3 1. (default = 0.4) Length_value numeric value 0 1. Proportion difference expected sequence length. (default = 0.5) N_value numeric value 0 100. Percentage acceptable ambiguous bases. (default = 2)","code":""},{"path":"/reference/Classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resvidex pipeline — Classify","text":"dataframe","code":""},{"path":"/reference/Classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resvidex pipeline — Classify","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")   Classification<-Classify(inputFile=file_path,model=FULL_GENOME)  #the variable Classification has now all the sequences classified Classification #>                                                                            Label #> 1 KM360090.1 Respiratory syncytial virus isolate RSV Memphis-37, complete genome #>   Clade Probability Length Length_QC N N_QC Probability_QC #> 1 A.2.1       0.785  15147      TRUE 0 TRUE           TRUE  if (FALSE) { #if you want to export the prediction utils::write.csv2(Classification,\"Classification_file.csv\") }"},{"path":"/reference/FULL_GENOME.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","title":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","text":"classification model (created ranger package) use ReSVidex package","code":""},{"path":"/reference/FULL_GENOME.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","text":"","code":"FULL_GENOME"},{"path":"/reference/FULL_GENOME.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random forest classification model based on full length RSV genome sequences — FULL_GENOME","text":"model includes list 18 elements (modified Object class ranger): predictions training dataset predictions num.trees Number decision trees (usually 1000) num.independent.variables Number independent variables mtry Value mtry used min.node.size Value minimal node size used. prediction.error Overall bag prediction error. forest Saved forest confusion.matrix Contingency table classes predictions based bag samples splitrule tSplit rule used training num.random.splits Number random splits treetype Type forest/tree call Function call importance.mode Importance mode used num.samples Number samples kmer k-mer size used preprocessing info extra information classification model (optional) date date model creation genome_size sequence length","code":""},{"path":"/reference/G.html","id":null,"dir":"Reference","previous_headings":"","what":"Random forest classification model based on full length RSV genome sequences — G","title":"Random forest classification model based on full length RSV genome sequences — G","text":"classification model (created ranger package) use ReSVidex package","code":""},{"path":"/reference/G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random forest classification model based on full length RSV genome sequences — G","text":"","code":"G"},{"path":"/reference/G.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Random forest classification model based on full length RSV genome sequences — G","text":"model includes list 18 elements (modified Object class ranger): predictions training dataset predictions num.trees Number decision trees (usually 1000) num.independent.variables Number independent variables mtry Value mtry used min.node.size Value minimal node size used. prediction.error Overall bag prediction error. forest Saved forest confusion.matrix Contingency table classes predictions based bag samples splitrule tSplit rule used training num.random.splits Number random splits treetype Type forest/tree call Function call importance.mode Importance mode used num.samples Number samples kmer k-mer size used preprocessing info extra information classification model (optional) date date model creation genome_size sequence length","code":""},{"path":"/reference/ignore_unused_imports.html","id":null,"dir":"Reference","previous_headings":"","what":"Ignore unused imports — ignore_unused_imports","title":"Ignore unused imports — ignore_unused_imports","text":"Ignore unused imports","code":""},{"path":"/reference/ignore_unused_imports.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ignore unused imports — ignore_unused_imports","text":"","code":"ignore_unused_imports()"},{"path":"/reference/ignore_unused_imports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ignore unused imports — ignore_unused_imports","text":"nothing","code":""},{"path":"/reference/Kcounter.html","id":null,"dir":"Reference","previous_headings":"","what":"Kcounter — Kcounter","title":"Kcounter — Kcounter","text":"Counts k-mers size required input model normalize data regarding genome size.","code":""},{"path":"/reference/Kcounter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kcounter — Kcounter","text":"","code":"Kcounter(SequenceData, model)"},{"path":"/reference/Kcounter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kcounter — Kcounter","text":"SequenceData list DNA sequences. Object must created ape package. See example. model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/Kcounter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kcounter — Kcounter","text":"list 3 vectors: normalized k-mer counts, genome length contents undefined bases.","code":""},{"path":"/reference/Kcounter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kcounter — Kcounter","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData<-Kcounter(SequenceData=sequence,model=FULL_GENOME)"},{"path":"/reference/ModelControl.html","id":null,"dir":"Reference","previous_headings":"","what":"ModelControl\r\nUtility function to check the classification model object — ModelControl","title":"ModelControl\r\nUtility function to check the classification model object — ModelControl","text":"ModelControl Utility function check classification model object","code":""},{"path":"/reference/ModelControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ModelControl\r\nUtility function to check the classification model object — ModelControl","text":"","code":"ModelControl(model)"},{"path":"/reference/ModelControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ModelControl\r\nUtility function to check the classification model object — ModelControl","text":"model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/ModelControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ModelControl\r\nUtility function to check the classification model object — ModelControl","text":"warnings","code":""},{"path":"/reference/ModelControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ModelControl\r\nUtility function to check the classification model object — ModelControl","text":"","code":"ModelControl(FULL_GENOME)"},{"path":"/reference/PredictionCaller.html","id":null,"dir":"Reference","previous_headings":"","what":"PredictionCaller — PredictionCaller","title":"PredictionCaller — PredictionCaller","text":"Performs prediction computes probability values.","code":""},{"path":"/reference/PredictionCaller.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PredictionCaller — PredictionCaller","text":"","code":"PredictionCaller(NormalizedData, model, QC_unknown = 0.3)"},{"path":"/reference/PredictionCaller.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PredictionCaller — PredictionCaller","text":"NormalizedData list 3 elements: normalized k-mer counts, genome length contents undefined bases.Produced Kcounter() function model random forest classification model. Must FULL_GENOME. See FULL_GENOME. QC_unknown numeric value 0 1. Stringent filter, classify probability score (default = 0.2)","code":""},{"path":"/reference/PredictionCaller.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PredictionCaller — PredictionCaller","text":"Data.frame classification results quality checks. output following properties: row corresponds one sample sequence. Label name sequence. Clade corresponding prediction. Probability proportions trees agreed Clade result. Values 0 1. Probability_QC logical value. TRUE sequence passed quality filter probability. Run QualityControl() fill column. Length Sequence length. Length_QC logical value. TRUE sequence passed quality filter length.Run QualityControl() fill column N proportions undefined bases sequence. lower better. N_QC logical value. TRUE sequence passed quality filter undefined bases. Run QualityControl() fill column","code":""},{"path":"/reference/PredictionCaller.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PredictionCaller — PredictionCaller","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- Kcounter(SequenceData=sequence,model=FULL_GENOME)  PredictedData <- PredictionCaller(NormalizedData=NormalizedData,model=FULL_GENOME)"},{"path":"/reference/QualityControl.html","id":null,"dir":"Reference","previous_headings":"","what":"QualityControl — QualityControl","title":"QualityControl — QualityControl","text":"QualityControl","code":""},{"path":"/reference/QualityControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QualityControl — QualityControl","text":"","code":"QualityControl(data, QC_value = 0.4, Length_value = 0.5, N_value = 2, model)"},{"path":"/reference/QualityControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QualityControl — QualityControl","text":"data data.frame obtained PredictionCaller() QC_value numeric value 0.3 1. (default = 0.4) Length_value numeric value 0 1. Proportion difference expected sequence length. (default = 0.5) N_value numeric value 0 100. Percentage acceptable ambiguous bases. (default = 2) model random forest classification model. Must FULL_GENOME. See FULL_GENOME.","code":""},{"path":"/reference/QualityControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QualityControl — QualityControl","text":"list three logical vectors. case TRUE means pass.","code":""},{"path":"/reference/QualityControl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QualityControl — QualityControl","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- Kcounter(SequenceData=sequence,model=FULL_GENOME)  PredictedData <- PredictionCaller(NormalizedData=NormalizedData,model=FULL_GENOME)  QualityControl(PredictedData,model=FULL_GENOME) #>                                                                            Label #> 1 KM360090.1 Respiratory syncytial virus isolate RSV Memphis-37, complete genome #>   Clade Probability Length Length_QC N N_QC Probability_QC #> 1 A.2.1       0.785  15147      TRUE 0 TRUE           TRUE"},{"path":"/reference/Quality_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality_filter — Quality_filter","title":"Quality_filter — Quality_filter","text":"Change Clade definition \"LowQuality\" samples least one FLAG QualityControl().","code":""},{"path":"/reference/Quality_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality_filter — Quality_filter","text":"","code":"Quality_filter(data)"},{"path":"/reference/Quality_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality_filter — Quality_filter","text":"data data.frame obtained QualityControl()","code":""},{"path":"/reference/Quality_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality_filter — Quality_filter","text":"data.frame","code":""},{"path":"/reference/Quality_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality_filter — Quality_filter","text":"","code":"file_path<-system.file(\"extdata\",\"test_dataset.fasta\",package=\"resvidex\")  sequence<-ape::read.FASTA(file_path,type = \"DNA\")  NormalizedData <- Kcounter(SequenceData=sequence,model=FULL_GENOME)  PredictedData <- PredictionCaller(NormalizedData=NormalizedData,model=FULL_GENOME)  PredictedData <- QualityControl(PredictedData,model=FULL_GENOME)  PredictedData <- Quality_filter(PredictedData)"},{"path":"/reference/runShinyApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Resvidex shiny app — runShinyApp","title":"Run Resvidex shiny app — runShinyApp","text":"Deploys server runs Resvidex app locally","code":""},{"path":"/reference/runShinyApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Resvidex shiny app — runShinyApp","text":"","code":"runShinyApp()"},{"path":"/reference/runShinyApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Resvidex shiny app — runShinyApp","text":"shiny app","code":""},{"path":"/reference/runShinyApp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Resvidex shiny app — runShinyApp","text":"","code":"if (FALSE) { resvidex::runShinyApp() }"},{"path":"/news/index.html","id":"resvidex-development-version","dir":"Changelog","previous_headings":"","what":"resvidex (development version)","title":"resvidex (development version)","text":"version 0.0.0.9011 changed QC_unknown filter 0.3","code":""}]
